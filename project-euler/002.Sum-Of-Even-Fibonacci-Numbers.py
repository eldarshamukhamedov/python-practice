"""
Even Fibonacci numbers
Problem 2
https://projecteuler.net/problem=2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""


### Workers:
def fibPrimitiveRecursive (n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibPrimitiveRecursive(n - 1) + fibPrimitiveRecursive(n - 2)

def fibMemoizedRecursive (n, computed = {0: 1, 1: 1}):
    if n not in computed:
        computed[n] = fibMemoizedRecursive(n - 1, computed) + fibMemoizedRecursive(n - 2, computed)
    return computed[n]

### Runners:
def sequence (count, fibonacci):
    i, sum = 1, 0
    while i < count:
        val = fibonacci(i)
        i += 1
        print '\t{0}\t{1}'.format(val, sum)

def sumOfEvens (upperBound, fibonacci):
    i, sum = 1, 0
    while True:
        val = fibonacci(i)

        if (val > upperBound):
            break
        elif (val % 2 == 0):
            sum += val

        i += 1
        print '\t{0}\t{1}'.format(val, sum)

### Kick off:
print '\nsequence(fibPrimitiveRecursive):'
sequence(34, fibPrimitiveRecursive)

print '\nsequence(fibMemoizedRecursive):'
sequence(34, fibMemoizedRecursive)

print '\nsumOfEvens(fibMemoizedRecursive):'
sumOfEvens(4000000, fibMemoizedRecursive)

